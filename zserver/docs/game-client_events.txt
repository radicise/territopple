GAME TO CLIENT:
    waiting:
        promote (n [player num]: number)
        start (void)
        kick (n [player num | spectator id]: number | string, infer spectator: boolean [typeof n === 'string'])
        setready (n [player num]: number, r [ready]: boolean)
    error: (code: number, message: string | null, redirect: string | null, store: string | null)
    key:
        rejoin (key: string, g [game id]: string, p [player num]: number)
    player:
        join (n [player num]: number, t [team id]: number)
        leave (n [player num]: number)
        switch (n [player num]: number, t [team id]: number)
        spectate (n [player num]: number, id [spectator id]: string)
        ownid (n [player num]: number, t [team id]: number)
    spectator:
        join (n [spectator id]: string)
        leave (n [spectator id]: string)
        ownid (n [spectator id]: string)
    game:
        roomid (g [room id]: string)
        config (c [tile count]: number, t [topology]: number, d [necessary dimensions (see Topology class)]: Record<string,number>, p [max players]: number, l [host player num]: number)
        jlist (p [player list]: [number [player num], number [team id]][], s [spectator list]: string[])
        turn (n [player num]: number)
        move (n [tile num]: number, t [team id]: number)
        win (t [team id]: number)
        reconnected ()

BINARY GAME TO CLIENT:
    0:
        PREREQUISITE - game must have already transmitted the size of the board to the client
        sends tile values, then ownerships. sends each from left to right, top to bottom in a continuous stream, allowing the right edge of one row to wrap to the left edge of the next
        when sending tile values:
            if the tile is a corner: one bit is sent, 0 = 1 piece, 1 = 2 pieces
            if the tile is an edge or center: two bits are sent, following the pattern as above
        when sending tile ownerships:
            if the first bit is 0: the next three bits denote team
            if the first bit is 1: the next three bits denote team, and the following four bits denote the next n tiles all being that team (run-length encoding)

CLIENT TO GAME:
    waiting:
        leave (void)
        start (void)
        kick (n [player num | spectator id]: number | string, infer spectator: boolean [typeof n === 'string'])
        promote (n [player num]: number)
        setready (r [ready]: boolean)
    spectator:
        leave (void)
    player:
        leave (void)
    game:
        move (n [tile num]: number)
